name: Version Bump & Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  version-bump:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Remove duplicate domains
        run: |
          python scripts/remove_duplicates.py

      - name: Lint filter (check format, duplicates, invalid chars)
        run: |
          python scripts/filter_lint.py

      # - name: Domain check (optional, devam etsin)
      #   run: |
      #     python scripts/domain_check.py || true

      - name: Filter stats (bilgilendirme amaçlı)
        run: |
          python scripts/filter_stats.py

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Determine bump type from PR title
        id: bump_type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if echo "$PR_TITLE" | grep -iq '\[bump:major\]'; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$PR_TITLE" | grep -iq '\[bump:minor\]'; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$PR_TITLE" | grep -iq '\[bump:patch\]'; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Update version in filter list
        run: |
          python scripts/bump_version.py ${{ steps.bump_type.outputs.type }}

      - name: Commit and push version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add turk-adfilter.txt
          git commit -m "chore(release): bump ${{ steps.bump_type.outputs.type }} version [skip ci]" || echo "No changes to commit"
          git push

      - name: Generate hosts.txt
        run: |
          # Use the script that also handles version bumping (it will read the new version)
          # Assuming the script name is update_version_and_extract_domains as per previous context
          python scripts/generate_hosts.py 
          # Note: The script already updates the version in turk-adfilter.txt. 
          # This might be redundant if bump_version.py already did it.
          # Consider consolidating version logic if necessary. For now, assume generate_hosts.py is correct.

      - name: Commit and push hosts.txt
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Check if hosts.txt exists and has changed
          if [[ -f hosts.txt ]] && git diff --quiet hosts.txt; then
            echo "No changes in hosts.txt to commit."
          else
            git add hosts.txt
            git commit -m "chore: generate hosts.txt [skip ci]"
            git push
          fi

      - name: Create tag
        id: create_tag
        run: |
          # Get new version from turk-adfilter.txt
          VERSION=$(grep '^! Version:' turk-adfilter.txt | head -n1 | awk '{print $3}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          git tag $VERSION
          git push origin $VERSION

      - name: Install matplotlib for plotting
        run: pip install matplotlib

      - name: Run filter lint (for release notes)
        run: |
          python scripts/filter_lint.py > lint_output.txt
      - name: Run domain check (for release notes)
        run: |
          python scripts/domain_check.py > domain_check_output.txt
      - name: Run filter stats (for release notes)
        run: |
          python scripts/filter_stats.py > stats_output.txt

      - name: Generate plot images
        run: |
          python scripts/plot_filter_stats.py

      - name: Combine QA outputs
        run: |
          echo '### Filter Lint\\n' > release_qa.txt
          cat lint_output.txt >> release_qa.txt
          echo '\\n### Domain Check\\n' >> release_qa.txt
          cat domain_check_output.txt >> release_qa.txt
          echo '\\n### Filter Stats\\n' >> release_qa.txt
          cat stats_output.txt >> release_qa.txt

      - name: Publish Release using Release Drafter
        id: publish_release
        uses: release-drafter/release-drafter@v6.1.0
        with:
          publish: true
          tag: ${{ steps.create_tag.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get new version from the output of the create_tag step
          VERSION=${{ steps.create_tag.outputs.version }}
          gh release upload $VERSION tld_distribution.png active_inactive_distribution.png

      - name: Add image links to Release Notes
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get new version from the output of the create_tag step
          VERSION=${{ steps.create_tag.outputs.version }}
          # Prepare image links in markdown
          IMAGE_NOTES="\\n<img src='https://github.com/${GH_REPO}/releases/download/${VERSION}/tld_distribution.png' alt='TLD Distribution' width='600'/>\\n<img src='https://github.com/${GH_REPO}/releases/download/${VERSION}/active_inactive_distribution.png' alt='Active/Inactive Distribution' width='600'/>"
          # Append image links to existing release notes
          gh release view $VERSION --json body --jq .body > current_notes.txt
          echo -e "$IMAGE_NOTES" >> current_notes.txt
          gh release edit $VERSION --notes-file current_notes.txt